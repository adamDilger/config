" VimPlug
call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'preservim/nerdtree'
Plug 'vim-airline/vim-airline'
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'mattn/emmet-vim'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'SirVer/ultisnips'
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" Language specific plugins
Plug 'andreshazard/vim-freemarker'
Plug 'lepture/vim-velocity'
Plug 'mxw/vim-jsx'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'dart-lang/dart-vim-plugin'
Plug 'posva/vim-vue'
call plug#end()

"" auto load vimrc updates
"autocmd bufwritepost vimrc source $MYVIMRC

"" Leader
let mapleader = " "

"" General
set nocompatible
set noswapfile
set number " Show line number on current line
set linebreak	" Break lines at word (requires Wrap lines)
set showbreak=+++	" Wrap-broken line prefix
set showmatch	" Highlight matching brace

"set hlsearch	" Highlight all search results
set smartcase	" Enable smart-case search
set ignorecase	" Always case-insensitive
set incsearch	" Searches for strings incrementally
set autoindent	" Auto-indent new lines
set expandtab	" Use spaces instead of tabs
set shiftwidth=2	" Number of auto-indent spaces
set smartindent	" Enable smart-indent
set smarttab	" Enable smart-tabs
set softtabstop=2	" Number of spaces per Tab
set foldmethod=manual
set nofoldenable
set tabstop=2

"" Advanced
set ruler	" Show row and column ruler information
set undolevels=1000	" Number of undo levels
set backspace=indent,eol,start	" Backspace behaviour
set listchars=tab:>-,trail:~
set list

"" My additions
filetype on
syntax on
colorscheme gruvbox
let g:gruvbox_contrast_dark = 'hard'
set background=dark
set colorcolumn=90
set hidden
set history=100

" tags
set tags=tags

"Clipboard remaps
noremap <Leader>y "+y
noremap <Leader>P "+P
noremap <Leader>p "+p

" NERDTree
map <Leader>o :NERDTreeToggle<CR>
map <Leader>n :NERDTreeFind<CR>
let g:NERDTreeIgnore = ['node_modules$', '^tags$', '^\d*\.?tags$', '^target$']

" set project bookmark files
if isdirectory(expand(".git"))
  let g:NERDTreeBookmarksFile = '.git/.nerdtree-bookmarks'
endif

" fzf
nnoremap <C-p> :GFiles<CR>

" Customize fzf colors to match your color scheme
let g:fzf_colors =
 \ { 'fg':      ['fg', 'Normal'],
 \ 'bg':      ['bg', 'Normal'],
 \ 'hl':      ['fg', 'Comment'],
 \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
 \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
 \ 'hl+':     ['fg', 'Statement'],
 \ 'info':    ['fg', 'PreProc'],
 \ 'border':  ['fg', 'Ignore'],
 \ 'prompt':  ['fg', 'Conditional'],
 \ 'pointer': ['fg', 'Exception'],
 \ 'marker':  ['fg', 'Keyword'],
 \ 'spinner': ['fg', 'Label'],
 \ 'header':  ['fg', 'Comment'] }

let g:fzf_layout = { 'down': '~20%' }

"insert mode
inoremap {}<CR> {<CR>}<C-o>O
inoremap {},<CR> {<CR>},<C-o>O
autocmd InsertEnter,InsertLeave * set cul!
set timeoutlen=1000
set ttimeoutlen=0

" split remaps
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <leader>> 20<C-W>>
nnoremap <leader>< 20<C-W><
nnoremap <leader>- 20<C-W>-
nnoremap <leader>+ 20<C-W>+

set splitbelow
set splitright
set guioptions-=L

"airline
let g:airline#extensions#whitespace#enabled = 0
let g:airline_section_y=""

"" handy macros
nnoremap <silent> <Leader>rg :Rg <CR>
nnoremap <silent> <Leader>rs :Rg <C-R><C-W><CR>
vnoremap <Leader>rs y:Rg <C-R>"<CR>

"" grep command to use rg
if executable("rg")
    set grepprg=rg\ --vimgrep\ --no-heading
    set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

"" format text
nnoremap <Leader>fjs :%!python -mjson.tool<CR>:set filetype=json<CR>:echomsg "Formatted as JSON"<CR>

" React macros
" comment out jsx code
xnoremap <leader>* <esc>:norm `<O{ /*<esc>`>o*/ }<esc>

" Velocity Templating
au BufNewFile,BufRead *.vtl set ft=velocity

" vim signify (gitgutter)
let g:signify_realtime = 0

" Open Commands
" nnoremap <leader>oc :!code . -g %<CR>
" nnoremap <leader>os :!subl . %<CR>

" Ultisnips snippets
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsEditSplit="vertical"

" coc vim
runtime custom/cocvim.vim
